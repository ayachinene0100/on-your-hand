import{_ as r,W as k,X as d,Z as n,Y as a,$ as s,a0 as e,a1 as c,C as u}from"./framework-e9da4443.js";const m={},v=n("h1",{id:"最佳实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#最佳实践","aria-hidden":"true"},"#"),s(" 最佳实践")],-1),b=n("h2",{id:"使用现有的实现优于自行开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用现有的实现优于自行开发","aria-hidden":"true"},"#"),s(" 使用现有的实现优于自行开发")],-1),h=n("p",null,[s("在实现某一功能前，首先考虑该功能是否已经有"),n("strong",null,"成熟、可靠、标准"),s("的实现。 如果该实现可以满足需求，则优先考虑使用现有实现，而非自行开发。")],-1),g=n("p",null,"使用现有实现有着以下好处：",-1),w=n("ul",null,[n("li",null,"代码统一（重复造轮子会导致代码冗余）"),n("li",null,"开发简便（无需自行开发）"),n("li",null,"可靠性高（业界成熟的实现已经经过时间的考验）")],-1),y={id:"使用valueof-优于使用new",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#使用valueof-优于使用new","aria-hidden":"true"},"#",-1),x=n("code",null,"valueOf()",-1),_=n("code",null,"new()",-1),S=c(`<p>通常某些类会为客户提供一些<code>static</code>的方法用于返回该类的实例。<br> 一个常见的例子是各种基本类型的封装类。<br> 如<code>Integer</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>valueOf()</code>通过使用cache来复用对象，从而避免了创建过多对象。</p><p>使用<code>new()</code>意味着创建一个对象的实例。 <strong>每使用一次<code>new()</code>就会有一个实例被创建。</strong> 而静态对象创建方法则不然，类的设计者可以在方法内部进行特殊的优化。从而实现对象复用等目的。 因此，应该首先考虑使用<code>valueOf()</code></p><div class="hint-container tip"><p class="hint-container-title">扩展</p><p>该词条可以扩展为：使用静态构造方法优于直接使用构造方法</p></div>`,5),I={id:"使用stringutils-substring-优于使用s-substring",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#使用stringutils-substring-优于使用s-substring","aria-hidden":"true"},"#",-1),O=n("code",null,"StringUtils.substring()",-1),P=n("code",null,"s.substring()",-1),C=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// org.apache.commons.lang.StringUtils;"),s(`

`),n("span",{class:"token doc-comment comment"},`/**
* StringUtils.substring(null, *, *)    = null
* StringUtils.substring("", * ,  *)    = "";
* StringUtils.substring("abc", 0, 2)   = "ab"
* StringUtils.substring("abc", 2, 0)   = ""
* StringUtils.substring("abc", 2, 4)   = "c"
* StringUtils.substring("abc", 4, 6)   = ""
* StringUtils.substring("abc", 2, 2)   = ""
* StringUtils.substring("abc", -2, -1) = "b"
* StringUtils.substring("abc", -4, 2)  = "ab"
*/`),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"substring"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" start"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" end"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("str "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// handle negatives"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("end "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        end `),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(" end"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remember end is negative"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("start "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        start `),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(" start"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// remember start is negative"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// check length next"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("end "),n("span",{class:"token operator"},">"),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        end `),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},'// if start is greater than end, return ""'),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("start "),n("span",{class:"token operator"},">"),s(" end"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token constant"},"EMPTY"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("start "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        start `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("end "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        end `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"substring"),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"substring"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" beginIndex"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" endIndex"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" length "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"checkBoundsBeginEnd"),n("span",{class:"token punctuation"},"("),s("beginIndex"),n("span",{class:"token punctuation"},","),s(" endIndex"),n("span",{class:"token punctuation"},","),s(" length"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("beginIndex "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" endIndex "),n("span",{class:"token operator"},"=="),s(" length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" subLen "),n("span",{class:"token operator"},"="),s(" endIndex "),n("span",{class:"token operator"},"-"),s(" beginIndex"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"isLatin1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token class-name"},"StringLatin1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newString"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},","),s(" beginIndex"),n("span",{class:"token punctuation"},","),s(" subLen"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token class-name"},"StringUTF16"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newString"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},","),s(" beginIndex"),n("span",{class:"token punctuation"},","),s(" subLen"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=c('<p>可以看到，<code>StringUtils.substring()</code>对原生的<code>substring()</code>作了进一步的封装。</p><p>主要体现在以下几点：</p><ol><li>空指针检查(15-17)</li><li>边界处理(28-30, 33-35, 37-42)</li><li>负下标功能(20-25)</li></ol><p>因此，使用<code>StringUtils.substring()</code>，你可以获得以下好处：</p><ol><li>绝对不会抛出异常</li><li>绝对不会返回nul（除非str本身为null）</li><li>处理末尾时的便捷性</li></ol><h2 id="使用try-with-resource优于finally-close" tabindex="-1"><a class="header-anchor" href="#使用try-with-resource优于finally-close" aria-hidden="true">#</a> 使用try-with-resource优于finally close</h2>',6),A=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 使用try-with-resource，代码简洁明了"),s(`
`),n("span",{class:"token class-name"},"File"),s(" file "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"some path"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InputStream"),s(" in "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"FileUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"openInputStream"),n("span",{class:"token punctuation"},"("),s("file"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 对in做一些操作"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 使用finally close，代码又臭又长"),s(`
`),n("span",{class:"token class-name"},"File"),s(" file "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"some path"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"InputStream"),s(" in "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
    in `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"FileUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"openInputStream"),n("span",{class:"token punctuation"},"("),s("file"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 对in做一些操作"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"finally"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("in "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
            in`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"IOException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=c(`<p>实现了<code>AutoCloseable</code>接口的对象都可以声明在<code>try()</code>中， try catch代码块执行完毕后声明在<code>try()</code>中的变量会自动关闭。</p><p>使用try-with-resource也可以很好地避免忘记关闭流之类的情况。</p><h2 id="使用-来使长数字更加可读" tabindex="-1"><a class="header-anchor" href="#使用-来使长数字更加可读" aria-hidden="true">#</a> 使用&#39;_&#39;来使长数字更加可读</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1000亿，但可读性很差</span>
<span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">100000000000L</span><span class="token punctuation">;</span>
<span class="token comment">// 1000亿，但可读性很好</span>
<span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">1000_0000_0000L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你应该总是使用‘L’来表示long字面值，而非&#39;l&#39;。</p></div><h2 id="使用封装好的读写方法优于原生读写" tabindex="-1"><a class="header-anchor" href="#使用封装好的读写方法优于原生读写" aria-hidden="true">#</a> 使用封装好的读写方法优于原生读写</h2><h3 id="小文件读写" tabindex="-1"><a class="header-anchor" href="#小文件读写" aria-hidden="true">#</a> 小文件读写</h3><p><code>java.nio.file.Files</code>提供了一些简单易用的读取方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">Charset</span> cs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">Charset</span> cs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
<span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">Charset</span> cs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>java.nio.file.Files</code>也提供了一些简单易用的写入方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Path</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token class-name">Path</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span>
           <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CharSequence</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">,</span>
           <span class="token class-name">OpenOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token class-name">Path</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CharSequence</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">,</span>
           <span class="token class-name">Charset</span> cs<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    

<span class="token class-name">Path</span> <span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> csq<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>

<span class="token class-name">Path</span> <span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> csq<span class="token punctuation">,</span> <span class="token class-name">Charset</span> cs<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法在读/写小文件时非常好用。使用者无需考虑关闭流等繁琐的细节。 但并不适合读/写大文件。因为这些方法都尝试一次性将文件内容读/写到内存中。<br> 特别地，由于<code>byte[]</code>的长度限制，诸如<code>readAllBytes()</code>，<code>write(..byte[]..)</code>一类的方法最多只能读/写2147483647B，即2GB。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>以上文本读/写方法在不声明<code>Charset</code>时，默认为<code>sun.nio.cs.UTF_8.INSTANCE</code></p></div><p>类似的工具类还有apache的<code>FileUtils</code>，<code>IOUtils</code>。</p><h3 id="大文件读取" tabindex="-1"><a class="header-anchor" href="#大文件读取" aria-hidden="true">#</a> 大文件读取</h3><h4 id="二进制" tabindex="-1"><a class="header-anchor" href="#二进制" aria-hidden="true">#</a> 二进制</h4><p>Java 11提供了<code>byte[] InputStream.readNBytes(int len)</code><br> 若使用Java 8可以考虑copy<code>readNBytes()</code>的实现。</p><h4 id="文本" tabindex="-1"><a class="header-anchor" href="#文本" aria-hidden="true">#</a> 文本</h4><p>考虑使用<code>org.apache.commons.io.IOUtils.lineIterator()</code></p>`,20),L={id:"考虑复用对象",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#考虑复用对象","aria-hidden":"true"},"#",-1),T=c(`<p>考虑以下代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token function">isAmt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^(0|[1-9][0-9]*)\\\\.[0-9]{2}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法用来判断一个字符串是否是保留到两位小数的正数（或是&quot;0.00&quot;）。 乍一看似乎没什么问题，让我们看看内部发生了什么事情。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java.lang.String.matches()</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// java.util.regex.Pattern.matches()</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到内部会创建一个<code>Pattern</code>对象和<code>Matcher</code>对象。 如果<code>isAmt()</code>被调用<strong>一百万次</strong>，就会创建<strong>一百万个</strong><code>Pattern</code>对象！ 而这些<code>Pattern</code>对象之间根本没什么不同！</p><p>改进：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Pattern是线程安全的，所以你可以很放心地这么做</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">AMT</span> <span class="token operator">=</span> 
    <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^(0|[1-9][0-9]*)\\\\.[0-9]{2}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">isAmt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">AMT</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function N(M,V){const t=u("Badge"),i=u("CodeTabs");return k(),d("div",null,[v,n("ul",null,[n("li",null,[a(t,{text:"Common",type:"tip"}),s("代表该最佳实践虽用特例来说明，但其中蕴含的道理是通用的。")])]),b,h,g,w,n("h2",y,[f,s(" 使用"),x,s("优于使用"),_,s(),a(t,{text:"Common",type:"tip"})]),S,n("h2",I,[j,s(" 使用"),O,s("优于使用"),P,s(),a(t,{text:"Common",type:"tip"})]),a(i,{id:"59",data:[{title:"StringUtils.substring()"},{title:"String.substring()"}],"tab-id":"java"},{tab0:e(({title:o,value:p,isActive:l})=>[C]),tab1:e(({title:o,value:p,isActive:l})=>[E]),_:1},8,["data"]),U,a(i,{id:"113",data:[{title:"try-with-resource"},{title:"finally close"}],"tab-id":"java"},{tab0:e(({title:o,value:p,isActive:l})=>[A]),tab1:e(({title:o,value:p,isActive:l})=>[q]),_:1}),B,n("h2",L,[F,s(" 考虑复用对象 "),a(t,{text:"Common",type:"tip"})]),T])}const $=r(m,[["render",N],["__file","best-practice.html.vue"]]);export{$ as default};
