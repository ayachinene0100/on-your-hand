import{_ as a,Y as s,Z as n,a3 as e}from"./framework-a624696e.js";const p={},t=e(`<h1 id="通用" tabindex="-1"><a class="header-anchor" href="#通用" aria-hidden="true">#</a> 通用</h1><h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><h3 id="复制粘贴" tabindex="-1"><a class="header-anchor" href="#复制粘贴" aria-hidden="true">#</a> 复制粘贴</h3><ul><li>复制：<code>Ctrl + Insert</code></li><li>粘贴：<code>Shift + Insert</code></li></ul><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><p><code>Ctrl + u</code></p><p>删除整行，将光标移动到行首</p><p><code>Ctrl + k</code></p><p>删除光标所在位置及其以后的所有字符</p><h3 id="光标移动" tabindex="-1"><a class="header-anchor" href="#光标移动" aria-hidden="true">#</a> 光标移动</h3><p><code>Ctrl + a</code></p><p>光标移动到行首</p><p><code>Ctrl + e</code></p><p>光标移动到行尾</p><p><code>Alt + 左箭头</code></p><p>向前移动一个单词</p><p><code>Alt + 右箭头</code></p><p>向后移动一个单词</p><h3 id="历史命令" tabindex="-1"><a class="header-anchor" href="#历史命令" aria-hidden="true">#</a> 历史命令</h3><p><code>history</code></p><p>显示命令执行记录</p><p><code>Ctrl + r</code></p><p>开启搜索模式，搜索历史命令</p><p>在该模式下按<code>Ctrl + r</code>可以继续向前搜索</p><p>按回车可以直接执行命令</p><p>按<code>Ctrl + e</code>可以选中命令并使光标到行尾但并不执行</p><p>按<code>Ctrl + g</code>可以退出搜索模式</p><p>使用![命令id]可以执行历史命令</p><h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构" aria-hidden="true">#</a> 文件结构</h2><p>使用<code>ls</code>只能查看当前目录下的文件。 想要递归查看可以考虑使用<code>tree</code>。</p><h2 id="清空文件内容" tabindex="-1"><a class="header-anchor" href="#清空文件内容" aria-hidden="true">#</a> 清空文件内容</h2><p>有的时候我们没有删除文件的权限，或者文件包含复杂的权限设置、符号连接等等。 如果只想清空文件内容，同时保留以上属性，可以通过以下方式</p><p><code>&gt; [filepath]</code></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>以上用到了linux重定向。表示把空内容输入到filepath位置的文件中</p></div><h2 id="根据域名ip" tabindex="-1"><a class="header-anchor" href="#根据域名ip" aria-hidden="true">#</a> 根据域名ip</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">ping</span> www.baidu.com
PING www.a.shifen.com <span class="token punctuation">(</span><span class="token number">157.148</span>.69.80<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">157.148</span>.69.80: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">51</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">34.793</span> ms
<span class="token number">64</span> bytes from <span class="token number">157.148</span>.69.80: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">51</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">38.886</span> ms
<span class="token number">64</span> bytes from <span class="token number">157.148</span>.69.80: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">51</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">40.921</span> ms
<span class="token number">64</span> bytes from <span class="token number">157.148</span>.69.80: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">51</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">38.285</span> ms
<span class="token number">64</span> bytes from <span class="token number">157.148</span>.69.80: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">51</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">101.599</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看磁盘空间" tabindex="-1"><a class="header-anchor" href="#查看磁盘空间" aria-hidden="true">#</a> 查看磁盘空间</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@VM-12-15-ubuntu:~<span class="token comment"># df -h</span>
Filesystem      Size  Used Avail Use% Mounted on
tmpfs           198M  980K  197M   <span class="token number">1</span>% /run
/dev/vda2        40G  <span class="token number">8</span>.4G   30G  <span class="token number">23</span>% /
tmpfs           988M   24K  988M   <span class="token number">1</span>% /dev/shm
tmpfs           <span class="token number">5</span>.0M     <span class="token number">0</span>  <span class="token number">5</span>.0M   <span class="token number">0</span>% /run/lock
tmpfs           198M  <span class="token number">4</span>.0K  198M   <span class="token number">1</span>% /run/user/0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>-h中h代表human-readable，即以人类可阅读的形式输出</p></blockquote><h2 id="杀死端口上的进程" tabindex="-1"><a class="header-anchor" href="#杀死端口上的进程" aria-hidden="true">#</a> 杀死端口上的进程</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Windows</span>
<span class="token function">netstat</span> <span class="token parameter variable">-ano</span> <span class="token operator">|</span> findstr <span class="token number">8080</span>
taskkill /f /pid <span class="token punctuation">[</span>pid<span class="token punctuation">]</span>

<span class="token comment"># Linux / Mac OS</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i</span> :8080
<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解压到指定目录" tabindex="-1"><a class="header-anchor" href="#解压到指定目录" aria-hidden="true">#</a> 解压到指定目录</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">unzip</span> <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>目标目录<span class="token punctuation">]</span> <span class="token punctuation">[</span>压缩文件<span class="token punctuation">]</span>
<span class="token function">unzip</span> <span class="token parameter variable">-d</span> ./output_dir data.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多参数" tabindex="-1"><a class="header-anchor" href="#多参数" aria-hidden="true">#</a> 多参数</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将ls的输出作为echo的参数传入</span>
<span class="token comment"># 若ls输出a.txt，等价于：echo a.txt</span>
<span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token builtin class-name">echo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用例:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 停止所有正在运行的容器
docker ps -qa | xargs docker stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,47),l=[t];function i(c,r){return s(),n("div",null,l)}const d=a(p,[["render",i],["__file","commons.html.vue"]]);export{d as default};
