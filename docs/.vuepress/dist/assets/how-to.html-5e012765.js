import{_ as i,C as e,Y as l,Z as u,a0 as n,$ as a,a1 as s,a2 as d,a3 as t}from"./framework-a624696e.js";const r={},k=n("h1",{id:"场景驱动",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#场景驱动","aria-hidden":"true"},"#"),s(" 场景驱动")],-1),v=t(`<h2 id="如何精确计算金额" tabindex="-1"><a class="header-anchor" href="#如何精确计算金额" aria-hidden="true">#</a> 如何精确计算金额？</h2><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h3><p>发票金额信息包含以下三种：</p><ul><li>金额</li><li>税额</li><li>价税合计</li></ul><p>其中每种金额都精确到小数点后两位。如：36.78。<br> 现已知金额和税额，想要计算价税合计。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><h4 id="_1-使用bigdecimal" tabindex="-1"><a class="header-anchor" href="#_1-使用bigdecimal" aria-hidden="true">#</a> 1. 使用<code>BigDecimal</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> amt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;41.51&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> tax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;2.49&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> total <span class="token operator">=</span> amt<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tax<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 44.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-转为整数运算" tabindex="-1"><a class="header-anchor" href="#_2-转为整数运算" aria-hidden="true">#</a> 2. 转为整数运算</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">int</span> amtInCent <span class="token operator">=</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token string">&quot;41.51&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> taxInCent <span class="token operator">=</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token string">&quot;2.49&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> totalInCent <span class="token operator">=</span> amtInCent <span class="token operator">+</span> taxInCent<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getAmtStr</span><span class="token punctuation">(</span>totalInCent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 44.00</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token class-name">String</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>
        amt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> 
        amt<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^(0|[1-9][0-9]*)\\\\.[0-9]{2}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;金额格式错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>amt<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAmtStr</span><span class="token punctuation">(</span><span class="token keyword">int</span> amtInCent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>amtInCent <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;金额应大于等于0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>amtInCent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 小数点左边部分</span>
    <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 小数点右边部分</span>
    <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">leftPad</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> left <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>int</code>的最大值为：2147483647，最大可表示金额为：2147,4836.47元<br> 当金额数较大时考虑使用<code>long</code></p></div>`,11),m={class:"hint-container warning"},b=n("p",{class:"hint-container-title"},"注意",-1),h=n("code",null,"String.matches()",-1),g=n("code",null,"Pattern",-1),y=n("code",null,"Matcher",-1),f=n("code",null,"Pattern",-1),w=n("br",null,null,-1),S=t(`<h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><p><code>BigDecimal</code>使用起来较为简单直接，但是效率不如整数运算。<br> 整数运算仅在输入和输出时进行一次类型转换（<code>string</code>&lt;-&gt;<code>int</code>），其余均为整型运算，效率较高。<br> 如果注重性能且涉及到多次运算，推荐使用整数运算。</p><h2 id="如何比较两个文件内容是否一致" tabindex="-1"><a class="header-anchor" href="#如何比较两个文件内容是否一致" aria-hidden="true">#</a> 如何比较两个文件内容是否一致？</h2><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1" aria-hidden="true">#</a> 场景</h3><p>校验文件完整性 将源文件分段传输后合并，检查合并后的文件是否完整。</p><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决方案</h3><h4 id="利用校验和" tabindex="-1"><a class="header-anchor" href="#利用校验和" aria-hidden="true">#</a> 利用校验和</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span>

<span class="token class-name">File</span> a <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;pathA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> b <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;pathB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> checkA <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">checksumCRC32</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> checkB <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">checksumCRC32</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>checkA <span class="token operator">==</span> checkB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>FileUtils</code>也提供了<code>checksum(final File file, final Checksum checksum)</code>方法，可以自行选择校验算法</p></div><h2 id="如何转换数据库中查回来的数据" tabindex="-1"><a class="header-anchor" href="#如何转换数据库中查回来的数据" aria-hidden="true">#</a> 如何转换数据库中查回来的数据？</h2><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2" aria-hidden="true">#</a> 场景</h3><p>数据库中user表的head_icon列存储的是头像所在路径，希望每次查询出该列时， 自动读取文件并转换为base64字符串。</p><h3 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2" aria-hidden="true">#</a> 解决方案</h3>`,13),x={id:"typehandler",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#typehandler","aria-hidden":"true"},"#",-1),E={href:"https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"TypeHandler",-1),q=t(`<h5 id="定义对应的typehandler" tabindex="-1"><a class="header-anchor" href="#定义对应的typehandler" aria-hidden="true">#</a> 定义对应的<code>TypeHandler</code></h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 表明数据库端的映射类型是varchar</span>
<span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>
<span class="token comment">// 表明Java端的映射类型是String</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64TypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>
            <span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新数据库时不进行转换</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用typehandler" tabindex="-1"><a class="header-anchor" href="#使用typehandler" aria-hidden="true">#</a> 使用<code>TypeHandler</code></h5><p>由于只希望该类型处理器作用在head_icon列，而不是所有的类型是varchar的列， 所以这里不使用全局注册<code>TypeHandler</code>。</p><ul><li>Raw use</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_id<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headIcon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>head_icon<span class="token punctuation">&quot;</span></span> 
    <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[Base64TypeHandler的全限定名]<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注解（MyBatis-Plus）</li></ul><p><em>以下示例省略了其他注解。</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">Base64TypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>笔者在使用自定义的<code>TypeHandler</code>时，<code>@Autowired</code>注解并不能生效。 应该是因为MyBatis在使用我的自定义<code>TypeHandler</code>时，并不是从IOC容器中拿取的缘故。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以进一步使用组合注解进行优化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">Base64TypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Base64</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
<span class="token comment">// 等价于@TableField(typeHandler = Base64TypeHandler.class)</span>
<span class="token annotation punctuation">@Base64</span>
<span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="当-autowired失效时应如何注入依赖" tabindex="-1"><a class="header-anchor" href="#当-autowired失效时应如何注入依赖" aria-hidden="true">#</a> 当<code>@Autowired</code>失效时应如何注入依赖？</h2><h3 id="场景-3" tabindex="-1"><a class="header-anchor" href="#场景-3" aria-hidden="true">#</a> 场景</h3><p>众所周知，<code>@Autowired</code>是依赖于IOC容器的。 <code>@Autowired</code>生效需要满足以下条件</p><ol><li><code>@Autowired</code>所在类（即要被依赖注入的类）在IOC容器中</li><li><code>@Autowired</code>所注解的依赖（即要注入的依赖）在IOC容器中</li></ol><p>⚠️注意：即使依赖被成功注入，也只是<strong>被IOC管理的那个<code>bean</code>实例</strong>的依赖被成功注入了。 因此，被依赖注入的类的其他实例是拿不到依赖对象的。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ImgService</span> imgService<span class="token punctuation">;</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>

<span class="token class-name">User</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token string">&quot;001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">getImgService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要<code>User</code>类在包扫描路径下，那么IOC容器里就确实会有一个<code>User</code>类型的<code>bean</code>， 而且这个<code>bean</code>的<code>imgService</code>不为空。 但该示例中，<code>user</code>是由<code>findUserById()</code>返回的新实例， 并没有经过<code>Spring IOC</code>，因此<code>user</code>的<code>ImgService</code>为<code>null</code>。</p><h3 id="解决方案-3" tabindex="-1"><a class="header-anchor" href="#解决方案-3" aria-hidden="true">#</a> 解决方案</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token comment">// 在该场景下，\`imgService\`声明为静态较为合适。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ImgService</span> imgService<span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setImgService</span><span class="token punctuation">(</span><span class="token class-name">ImgService</span> imgService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span><span class="token punctuation">.</span>imgService <span class="token operator">=</span> imgService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// Bean初始化完毕后注入依赖</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">setImgService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使idea-gradle项目默认使用本地gradle" tabindex="-1"><a class="header-anchor" href="#如何使idea-gradle项目默认使用本地gradle" aria-hidden="true">#</a> 如何使IDEA Gradle项目默认使用本地Gradle?</h2><h3 id="场景-4" tabindex="-1"><a class="header-anchor" href="#场景-4" aria-hidden="true">#</a> 场景</h3><p>当远程git仓库没有.idea文件夹时，拉取下来的代码默认使用gradle wrapper。 但项目总是想要使用本地gradle，想要更改该配置，但idea没有提供图形接口。</p><h3 id="解决方案-4" tabindex="-1"><a class="header-anchor" href="#解决方案-4" aria-hidden="true">#</a> 解决方案</h3><p>Help &gt; Edit Custom Properties...</p><p>在打开的idea.properties文件中输入：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">idea.gradle.distributionType</span><span class="token punctuation">=</span><span class="token value attr-value">LOCAL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后重启IDEA即可。</p><hr><p>IDEA内置Gradle插件源码在以下部分处理新Gradle项目的项目级别配置。 其中行高亮部分用来设置<code>Use Gradle from:</code>配置项的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>service<span class="token punctuation">.</span>project<span class="token punctuation">.</span>open

<span class="token comment">// ...</span>

<span class="token annotation builtin">@ApiStatus</span><span class="token punctuation">.</span>Internal
<span class="token keyword">fun</span> GradleProjectSettings<span class="token punctuation">.</span><span class="token function">setupGradleProjectSettings</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">,</span> 
    projectDirectory<span class="token operator">:</span> Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  externalProjectPath <span class="token operator">=</span> projectDirectory<span class="token punctuation">.</span>systemIndependentPath
  isUseQualifiedModuleNames <span class="token operator">=</span> <span class="token boolean">true</span>
  distributionType <span class="token operator">=</span>
    GradleEnvironment
      <span class="token punctuation">.</span>Headless
      <span class="token punctuation">.</span>GRADLE_DISTRIBUTION_TYPE
        <span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>DistributionType<span class="token operator">::</span>valueOf<span class="token punctuation">)</span>
        <span class="token operator">?:</span> DistributionType<span class="token punctuation">.</span>DEFAULT_WRAPPED
  gradleHome <span class="token operator">=</span> GradleEnvironment<span class="token punctuation">.</span>Headless<span class="token punctuation">.</span>GRADLE_HOME <span class="token operator">?:</span> <span class="token function">suggestGradleHome</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NonNls</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Denis Zhdanov
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">GradleEnvironment</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">DEBUG_GRADLE_HOME_PROCESSING</span> <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;gradle.debug.home.processing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Headless</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRADLE_DISTRIBUTION_TYPE</span> <span class="token operator">=</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;idea.gradle.distributionType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRADLE_HOME</span> <span class="token operator">=</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;idea.gradle.home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRADLE_VM_OPTIONS</span> <span class="token operator">=</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;idea.gradle.vmOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRADLE_OFFLINE</span> <span class="token operator">=</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;idea.gradle.offline&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNls</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRADLE_SERVICE_DIRECTORY</span> <span class="token operator">=</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;idea.gradle.serviceDirectory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Headless</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">GradleEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),B={id:"如何在数组结构改变时删除元素",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#如何在数组结构改变时删除元素","aria-hidden":"true"},"#",-1),A=t(`<h3 id="场景-5" tabindex="-1"><a class="header-anchor" href="#场景-5" aria-hidden="true">#</a> 场景</h3><p>Apache POI的<code>XWPFDocument</code>提供了删除元素的方法<code>removeBodyElement(int pos)</code>。 可以简单地把<code>XWPFDocument</code>理解成一个表示docx文档结构的类，其下包含一些元素（element）， 如：段落、表格等等。 <code>removeBodyElement(int pos)</code>可以删除文档下对应位置的元素。</p><p>如果你有两个元素a和b分别位于位置3，和位置5，根据直觉，很容易就会写出以下代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// doc是XWPFDocument类型的对象</span>
doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 删除元素a</span>
doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 删除元素b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>但是其中隐藏着bug，由于元素a位于元素b之前，删除元素a之后会导致元素b位置前移，从而元素b现在位于位置4。 现在再进行删除实际上删除的是元素b的下一个元素。</p></div><h3 id="解决方案-5" tabindex="-1"><a class="header-anchor" href="#解决方案-5" aria-hidden="true">#</a> 解决方案</h3><h4 id="逆序删除" tabindex="-1"><a class="header-anchor" href="#逆序删除" aria-hidden="true">#</a> 逆序删除</h4><p>即然删除一个元素会改变其之后元素的下标，而其之前元素的下标保持不变， 那我们可以通过逆序删除来完成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更一般地</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">XWPFDocument</span> doc<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 为了保证删除的正确性，pos必须元素不重复且由小到大排序</span>
    pos <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态计算新下标" tabindex="-1"><a class="header-anchor" href="#动态计算新下标" aria-hidden="true">#</a> 动态计算新下标</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 删除元素a</span>
doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 删除元素b</span>

<span class="token comment">// 更一般地</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">XWPFDocument</span> doc<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 为了保证删除的正确性，pos必须元素不重复且由小到大排序</span>
    pos <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 每删除一个元素，其之后的所有元素的下标都要前移一个位置</span>
        doc<span class="token punctuation">.</span><span class="token function">removeBodyElement</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>与之很相像的另一个主题请参考：<a href="./best-practice#%E4%B8%8D%E8%A6%81%E5%9C%A8%E9%81%8D%E5%8E%86%E6%97%B6%E6%94%B9%E5%8F%98collection%E7%9A%84%E7%BB%93%E6%9E%84">不要在遍历时改变Collection的结构</a></p></div><h2 id="spring如何声明异步接口" tabindex="-1"><a class="header-anchor" href="#spring如何声明异步接口" aria-hidden="true">#</a> Spring如何声明异步接口</h2><h3 id="场景-6" tabindex="-1"><a class="header-anchor" href="#场景-6" aria-hidden="true">#</a> 场景</h3><p>有一个接口比较耗时，如大量数据导出。希望该接口可以快速返回，而后端导出继续。</p><h3 id="解决方案-6" tabindex="-1"><a class="header-anchor" href="#解决方案-6" aria-hidden="true">#</a> 解决方案</h3><h4 id="_1-使用-async注解" tabindex="-1"><a class="header-anchor" href="#_1-使用-async注解" aria-hidden="true">#</a> 1. 使用<code>@Async</code>注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token comment">// 被注解的方法的返回值必须是void或者Future</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">export1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 更具体的，选择Future的子类</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">export2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">export3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 非法返回类型</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">export4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 还需要开启Async功能</span>
<span class="token comment">// 配合@Configuration使用</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在@EnableAsync注解的注释中有以下说明：</p><blockquote><p>The mode attribute controls how advice is applied: If the mode is AdviceMode.PROXY (the default), then the other attributes control the behavior of the proxying. <strong>Please note that proxy mode allows for interception of calls through the proxy only; local calls within the same class cannot get intercepted that way</strong>.</p></blockquote><p>AdviceMode可选值为PROXY和ASPECTJ 其中PROXY通过动态代理实现，ASPECTJ通过在编译器修改字节码文件实现。 由于同一类中的调用不会经过动态代理，故PROXY模式下，同一个类中的异步方法调用不会生效。</p>`,21);function C(T,P){const p=e("Badge"),c=e("RouterLink"),o=e("ExternalLinkIcon");return l(),u("div",null,[k,n("ul",null,[n("li",null,[a(p,{text:"陷阱",type:"danger"}),s("代表该场景中隐藏着不易察觉的bug，即使有经验的开发人员也有可能犯类似的错误")])]),v,n("div",m,[b,n("p",null,[s("示例代码出于简洁，使用了"),h,s("方法。 该方法内部会创建一个"),g,s("和一个"),y,s("对象。 为了避免重复创建对象造成的开销，在实际开发中，如果一个正则表达式会被多次使用， 你应该考虑复用该表达式对应的"),f,s("。"),w,s(" 详细可以参考"),a(c,{to:"/code/java/best-practice.html#%E8%80%83%E8%99%91%E5%A4%8D%E7%94%A8%E5%AF%B9%E8%B1%A1"},{default:d(()=>[s("考虑复用对象")]),_:1})])]),S,n("h4",x,[_,s(),n("a",E,[I,a(o)])]),q,n("h2",B,[j,s(" 如何在数组结构改变时删除元素 "),a(p,{text:"陷阱",type:"danger"})]),A])}const R=i(r,[["render",C],["__file","how-to.html.vue"]]);export{R as default};
