import{_ as n,W as s,X as a,a1 as t}from"./framework-e9da4443.js";const e={},p=t(`<h2 id="总是检查外部参数是否为空" tabindex="-1"><a class="header-anchor" href="#总是检查外部参数是否为空" aria-hidden="true">#</a> 总是检查外部参数是否为空</h2><div class="hint-container tip"><p class="hint-container-title">外部参数</p><p>指不明调用者传来的参数。 一般来讲，Web应用对外系统暴露的接口、Java代码中声明为<code>public</code>的函数（暴露给其他开发人员的函数） 所接收到的参数都是外部参数</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于外部参数，由于方法、接口调用者不明确，行为不固定，所以一定要进行空指针检查</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// userId可能为空！</span>
<span class="token class-name">String</span> userId <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">Fields</span><span class="token punctuation">.</span><span class="token constant">USER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提供给其他开发人员使用</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">subString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 其他人员有可能这样使用</span>
<span class="token comment">// 如果前端没有传入USER_ID字段而subString没有考虑到空指针的情况</span>
<span class="token comment">// 将会抛出NullPointerException</span>
<span class="token function">subString</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">Fields</span><span class="token punctuation">.</span><span class="token constant">USER_ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对于来源确定的参数的处理可以较为宽松" tabindex="-1"><a class="header-anchor" href="#对于来源确定的参数的处理可以较为宽松" aria-hidden="true">#</a> 对于来源确定的参数的处理可以较为宽松</h2><br><p>:::quote 来源确定的参数 指方法、接口的调用者是可以确定的， :::</p><h2 id="发现参数为空时的处理方式" tabindex="-1"><a class="header-anchor" href="#发现参数为空时的处理方式" aria-hidden="true">#</a> 发现参数为空时的处理方式</h2><h4 id="空为非正常情况-导致程序无法继续执行" tabindex="-1"><a class="header-anchor" href="#空为非正常情况-导致程序无法继续执行" aria-hidden="true">#</a> 空为非正常情况，导致程序无法继续执行：</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 做法1: 抛出异常</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;参数错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 也可以使用Assert</span>
<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">&quot;参数错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 做法2：给予参数一个默认值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  userId <span class="token operator">=</span> <span class="token class-name">SessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","param-check.html.vue"]]);export{d as default};
