import{_ as o,W as l,X as i,Z as n,$ as s,Y as e,a0 as u,a1 as a,C as t}from"./framework-e9da4443.js";const d={},r=a(`<h1 id="场景驱动" tabindex="-1"><a class="header-anchor" href="#场景驱动" aria-hidden="true">#</a> 场景驱动</h1><h2 id="如何精确计算金额" tabindex="-1"><a class="header-anchor" href="#如何精确计算金额" aria-hidden="true">#</a> 如何精确计算金额？</h2><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h3><p>发票金额信息包含以下三种：</p><ul><li>金额</li><li>税额</li><li>价税合计</li></ul><p>其中每种金额都精确到小数点后两位。如：36.78。<br> 现已知金额和税额，想要计算价税合计。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><h4 id="_1-使用bigdecimal" tabindex="-1"><a class="header-anchor" href="#_1-使用bigdecimal" aria-hidden="true">#</a> 1. 使用<code>BigDecimal</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> amt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;41.51&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> tax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;2.49&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> total <span class="token operator">=</span> amt<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tax<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 44.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-转为整数运算" tabindex="-1"><a class="header-anchor" href="#_2-转为整数运算" aria-hidden="true">#</a> 2. 转为整数运算</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">int</span> amtInCent <span class="token operator">=</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token string">&quot;41.51&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> taxInCent <span class="token operator">=</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token string">&quot;2.49&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> totalInCent <span class="token operator">=</span> amtInCent <span class="token operator">+</span> taxInCent<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getAmtStr</span><span class="token punctuation">(</span>totalInCent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 44.00</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertToCent</span><span class="token punctuation">(</span><span class="token class-name">String</span> amt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>
        amt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> 
        amt<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^(0|[1-9][0-9]*)\\\\.[0-9]{2}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;金额格式错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>amt<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAmtStr</span><span class="token punctuation">(</span><span class="token keyword">int</span> amtInCent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>amtInCent <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;金额应大于等于0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>amtInCent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 小数点左边部分</span>
    <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 小数点右边部分</span>
    <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">leftPad</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> left <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>int</code>的最大值为：2147483647，最大可表示金额为：2147,4836.47元<br> 当金额数较大时考虑使用<code>long</code></p></div>`,12),k={class:"hint-container warning"},v=n("p",{class:"hint-container-title"},"注意",-1),m=n("code",null,"String.matches()",-1),b=n("code",null,"Pattern",-1),h=n("code",null,"Matcher",-1),g=n("code",null,"Pattern",-1),y=n("br",null,null,-1),f=a(`<h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><p><code>BigDecimal</code>使用起来较为简单直接，但是效率不如整数运算。<br> 整数运算仅在输入和输出时进行一次类型转换（<code>string</code>&lt;-&gt;<code>int</code>），其余均为整型运算，效率较高。<br> 如果注重性能且涉及到多次运算，推荐使用整数运算。</p><h2 id="如何比较两个文件内容是否一致" tabindex="-1"><a class="header-anchor" href="#如何比较两个文件内容是否一致" aria-hidden="true">#</a> 如何比较两个文件内容是否一致？</h2><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1" aria-hidden="true">#</a> 场景</h3><ul><li>校验文件完整性</li><li>重复文件查找</li></ul><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决方案</h3><h4 id="利用校验和" tabindex="-1"><a class="header-anchor" href="#利用校验和" aria-hidden="true">#</a> 利用校验和</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span>

<span class="token class-name">File</span> a <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;pathA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> b <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;pathB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> checkA <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">checksumCRC32</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> checkB <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">checksumCRC32</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>checkA <span class="token operator">==</span> checkB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>FileUtils</code>也提供了<code>checksum(final File file, final Checksum checksum)</code>方法，可以自行选择校验算法</p></div><h2 id="如何转换数据库中查回来的数据" tabindex="-1"><a class="header-anchor" href="#如何转换数据库中查回来的数据" aria-hidden="true">#</a> 如何转换数据库中查回来的数据？</h2><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2" aria-hidden="true">#</a> 场景</h3><p>数据库中user表的head_icon列存储的是头像所在路径，希望每次查询出该列时， 自动读取文件并转换为base64字符串。</p><h3 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2" aria-hidden="true">#</a> 解决方案</h3>`,13),w={id:"typehandler",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#typehandler","aria-hidden":"true"},"#",-1),_={href:"https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"TypeHandler",-1),q=a(`<h5 id="定义对应的typehandler" tabindex="-1"><a class="header-anchor" href="#定义对应的typehandler" aria-hidden="true">#</a> 定义对应的<code>TypeHandler</code></h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 表明数据库端的映射类型是varchar</span>
<span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>
<span class="token comment">// 表明Java端的映射类型是String</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64TypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>
            <span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新数据库时不进行转换</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询时转base64</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">getBase64</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用typehandler" tabindex="-1"><a class="header-anchor" href="#使用typehandler" aria-hidden="true">#</a> 使用<code>TypeHandler</code></h5><p>由于只希望该类型处理器作用在head_icon列，而不是所有的类型是varchar的列， 所以这里不使用全局注册<code>TypeHandler</code>。</p><ul><li>Raw use</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_id<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headIcon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>head_icon<span class="token punctuation">&quot;</span></span> 
    <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[Base64TypeHandler的全限定名]<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注解（MyBatis-Plus）</li></ul><p><em>以下示例省略了其他注解。</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">Base64TypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>笔者在使用自定义的<code>TypeHandler</code>时，<code>@Autowired</code>注解并不能生效。 应该是因为MyBatis在使用我的自定义<code>TypeHandler</code>时，并不是从IOC容器中拿取的缘故。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以进一步使用组合注解进行优化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">Base64TypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Base64</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
<span class="token comment">// 等价于@TableField(typeHandler = Base64TypeHandler.class)</span>
<span class="token annotation punctuation">@Base64</span>
<span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="当-autowired失效时应如何注入依赖" tabindex="-1"><a class="header-anchor" href="#当-autowired失效时应如何注入依赖" aria-hidden="true">#</a> 当<code>@Autowired</code>失效时应如何注入依赖？</h2><h3 id="场景-3" tabindex="-1"><a class="header-anchor" href="#场景-3" aria-hidden="true">#</a> 场景</h3><p>众所周知，<code>@Autowired</code>是依赖于IOC容器的。 <code>@Autowired</code>生效需要满足以下条件</p><ol><li><code>@Autowired</code>所在类（即要被依赖注入的类）在IOC容器中</li><li><code>@Autowired</code>所注解的依赖（即要注入的依赖）在IOC容器中</li></ol><p>⚠️注意：即使依赖被成功注入，也只是<strong>被IOC管理的那个<code>bean</code>实例</strong>的依赖被成功注入了。 因此，被依赖注入的类的其他实例是拿不到依赖对象的。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ImgService</span> imgService<span class="token punctuation">;</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>

<span class="token class-name">User</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token string">&quot;001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">getImgService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要<code>User</code>类在包扫描路径下，那么IOC容器里就确实会有一个<code>User</code>类型的<code>bean</code>， 而且这个<code>bean</code>的<code>imgService</code>不为空。 但该示例中，<code>user</code>是由<code>findUserById()</code>返回的新实例， 并没有经过<code>Spring IOC</code>，因此<code>user</code>的<code>ImgService</code>为<code>null</code>。</p><h3 id="解决方案-3" tabindex="-1"><a class="header-anchor" href="#解决方案-3" aria-hidden="true">#</a> 解决方案</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token comment">// 在该场景下，\`imgService\`声明为静态较为合适。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ImgService</span> imgService<span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token class-name">String</span> headIcon<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setImgService</span><span class="token punctuation">(</span><span class="token class-name">ImgService</span> imgService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span><span class="token punctuation">.</span>imgService <span class="token operator">=</span> imgService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Getters and Setters...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// Bean初始化完毕后注入依赖</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">setImgService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function I(B,C){const p=t("RouterLink"),c=t("ExternalLinkIcon");return l(),i("div",null,[r,n("div",k,[v,n("p",null,[s("示例代码出于简洁，使用了"),m,s("方法。 该方法内部会创建一个"),b,s("和一个"),h,s("对象。 为了避免重复创建对象造成的开销，在实际开发中，如果一个正则表达式会被多次使用， 你应该考虑复用该表达式对应的"),g,s("。"),y,s(" 详细可以参考"),e(p,{to:"/code/java/best-practice.html#%E8%80%83%E8%99%91%E5%A4%8D%E7%94%A8%E5%AF%B9%E8%B1%A1"},{default:u(()=>[s("考虑复用对象")]),_:1})])]),f,n("h4",w,[S,s(),n("a",_,[x,e(c)])]),q])}const U=o(d,[["render",I],["__file","how-to.html.vue"]]);export{U as default};
